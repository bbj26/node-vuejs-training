/employees:
  get:
    summary: 'Returns the list of all employees'
    tags: [Employees]
    responses:
      200:
        $ref: '#/responses/200FetchEmployees'
      500:
        $ref: '#/responses/500ServerError'
  post:
    summary: 'Creates the new employee'
    tags: ['Employees']
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: 'John Doe'
    responses:
      201:
        $ref: '#/responses/201EmployeeCreation'
      403:
        $ref: '#/responses/403ValidationError'
      500:
        $ref: '#/responses/500ServerError'

/employees/{id}:
  delete:
    summary: 'Delete employee by ID'
    tags: ['Employees']
    parameters:
      - $ref: '#/parameters/employeeID'
    responses:
      200:
        $ref: '#/responses/200EmployeeDeletion'
      403:
        $ref: '#/responses/403ValidationError'
      404:
        $ref: '#/responses/404EmployeNotFound'
      500:
        $ref: '#/responses/500ServerError'

components:
  schemas:
    Employee:
      type: object
      required:
        - name
      properties:
        _id:
          type: string
          description: 'The auto-generated ID of the employee'
        name:
          type: string
          description: 'Employee name'
        createdAt:
          type: timestamp
          description: 'Creation timestamp'
        updatedAt:
          type: timestamp
          description: 'Updation timestamp'
      example:
        _id: '61aa33c659ded74313b379d9'
        name: 'Stephen King'
        createdAt: '2021-12-03T15:12:06.956Z'
        updatedAt: '2021-12-03T15:12:06.956Z'

responses:
  200EmployeeDeletion:
    description: 'OK'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 200
            message:
              type: string
              example: 'Employee successfully deleted'
  200FetchEmployees:
    description: 'OK'
    content:
      application/json:
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
          example:
            [
              {
                _id: '61af2318fa94fd876ff9bba2',
                name: 'John Doe',
                createdAt: '2021-12-07T09:02:16.355Z',
                updatedAt: '2021-12-07T09:02:16.355Z',
                __v: 0,
              },
              {
                _id: '61af231afa94fd876ff9bba5',
                name: 'Jane Doe',
                createdAt: '2021-12-07T09:02:18.004Z',
                updatedAt: '2021-12-07T09:02:18.004Z',
                __v: 0,
              },
            ]
  201EmployeeCreation:
    description: 'OK'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 201
            message:
              type: string
              example: 'Employee successfully created'
            saved:
              type: object
              example:
                {
                  _id: '61af231afa94fd876ff9bba5',
                  name: 'Jane Doe',
                  createdAt: '2021-12-07T09:02:18.004Z',
                  updatedAt: '2021-12-07T09:02:18.004Z',
                  __v: 0,
                }
  403ValidationError:
    description: 'Express validation error'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 403
            message:
              type: string
              example: 'Name must be at least 2 characters long'
  404EmployeNotFound:
    description: 'Employee not found'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 404
            message:
              type: string
              example: 'Invalid ID'
  500ServerError:
    description: 'Internal server error'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 500
            message:
              type: string
              example: 'Server down'
parameters:
  employeeID:
    in: path
    name: 'id'
    schema:
      type: string
    required: true
    description: 'Employee ID'

  content:
    employee:
      application/json:
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Employee'