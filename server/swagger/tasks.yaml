/tasks:
  get:
    summary: 'Returns the list of all tasks'
    tags: ['Tasks']
    responses:
      200:
        $ref: '#/responses/200FetchTasks'
      500:
        $ref: '#/responses/500ServerError'

/tasks/{id}:
  get:
    summary: 'Returns the list of specific employees tasks'
    tags: ['Tasks']
    parameters:
      - $ref: '#/parameters/employeeID'
    responses:
      200:
        $ref: '#/responses/200FetchTasks'
      403:
        $ref: '#/responses/403ValidationError'
      500:
        $ref: '#/responses/500ServerError'

  post:
    summary: 'Creates the new task'
    tags: ['Tasks']
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: 'Make shopping list'
              deadline:
                type: string
                example: '2023-07-08'
              completed:
                type: boolean
                example: 'true'
    parameters:
      - $ref: '#/parameters/employeeID'
    responses:
      201:
        $ref: '#/responses/201TaskCreation'
      403:
        $ref: '#/responses/403ValidationError'
      500:
        $ref: '#/responses/500ServerError'
  delete:
    summary: 'Delete task by ID'
    tags: ['Tasks']
    parameters:
      - $ref: '#/parameters/taskID'
    responses:
      200:
        $ref: '#/responses/200TaskDeletion'
      403:
        $ref: '#/responses/403ValidationError'
      405:
        $ref: '#/responses/405NotAllowed'
      500:
        $ref: '#/responses/500ServerError'

/tasks/complete/{id}:
  post:
    summary: 'Toggle task completion'
    tags: ['Tasks']
    parameters:
      - $ref: '#/parameters/taskID'
    responses:
      200:
        $ref: '#/responses/200TaskUpdation'
      403:
        $ref: '#/responses/403ValidationError'
      404:
        $ref: '#/responses/404TaskNotFound'
      500:
        $ref: '#/responses/500ServerError'

components:
  schemas:
    Task:
      type: object
      required:
        - name
        - employeeId
        - deadline
        - completed
      properties:
        _id:
          type: string
          description: 'The auto-generated id of the task'
        name:
          type: string
          description: 'Task name'
        employeeId:
          type: string
          description: 'ID of the employee that the task is assigned to'
        deadline:
          type: string
          description: 'Task deadline'
        completed:
          type: boolean
          description: 'Task completion flag'
        createdAt:
          type: timestamp
          description: 'Creation timestamp'
        updatedAt:
          type: timestamp
          description: 'Updation timestamp'
      example:
        _id: '61aa33c659ded74313b379d9'
        name: 'Go shopping'
        employeeId: '61aa33c659ded74313b37446'
        deadline: '2021-12-07'
        completed: 'false'
        createdAt: '2021-12-03T15:12:06.956Z'
        updatedAt: '2021-12-03T15:12:06.956Z'

responses:
  200TaskDeletion:
    description: 'OK'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 200
            message:
              type: string
              example: 'Task successfully deleted'
  200FetchTasks:
    description: 'OK'
    content:
      application/json:
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          example: 
            [
              {
                _id: '61af255a475eb15fe01bc2f6',
                name: 'Contact all customers',
                employeeId: '61af2318fa94fd876ff9bba2',
                deadline: '2021-12-16',
                completed: false,
                createdAt: '2021-12-07T09:11:54.889Z',
                updatedAt: '2021-12-07T09:12:52.746Z',
                __v: 0,
              },
              {
                _id: '61af231afa94fd876ff9bba5',
                name: 'Do shopping',
                employeeId: '61af2318fa94fd876ff9cc3f',
                deadline: '2021-12-16',
                completed: true,
                createdAt: '2021-09-07T09:02:18.004Z',
                updatedAt: '2021-10-11T09:02:18.004Z',
                __v: 0,
              },
            ]
  200TaskUpdation:
    description: 'OK'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 200
            message:
              type: string
              example: 'Task successfully updated'
  201TaskCreation:
    description: 'OK'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 201
            message:
              type: string
              example: 'Task successfully created'
            saved:
              type: object
              example: {
                  _id: '61af231afa94fd876ff9bba5',
                  name: 'Do shopping',
                  employeeId: '61af2318fa94fd876ff9cc3f',
                  deadline: '2021-12-16',
                  completed: 'true',
                  createdAt: '2021-09-07T09:02:18.004Z',
                  updatedAt: '2021-10-11T09:02:18.004Z',
                  __v: 0,
                }
  403ValidationError:
    description: 'Express validation error'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 400
            message:
              type: string
              example: 'Name must be at least 2 characters long'
  404TaskNotFound:
    description: 'Task not found'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 404
            message:
              type: string
              example: 'Invalid ID'
  405NotAllowed:
    description: 'OK'
    content:
      application/json:
        schema:
          type: object
          properties:
            code:
              type: number
              example: 405
            message:
              type: string
              example: 'Not allowed to delete this task'
  500ServerError:
    description: 'Internal server error'
    content:
      application/json:
        schema:
          type: object
          properties:
            code: 
              type: number
              example: 500
            message:
              type: string
              example: 'Server down'
parameters:
  taskID:
    in: path
    name: 'id'
    schema:
      type: string
    required: true
    description: 'Task ID'

  employeeID:
    in: path
    name: 'id'
    schema:
      type: string
    required: true
    description: 'Employee ID'